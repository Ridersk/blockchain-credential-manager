name: Project CI/CD

on:
  push:
    branches:
      - main
      - "release/**"

  pull_request:
    branches:
      - main
      - "release/**"

jobs:
  ci-program:
    name: CI - Program
    runs-on: ubuntu-latest
    env:
      PROGRAM_AUTHORITY_KEYPAIR: ${{ secrets.PROGRAM_AUTHORITY_KEYPAIR }}
      PROGRAM_KEYPAIR: ${{ secrets.PROGRAM_KEYPAIR }}
    steps:
      - uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: ./program
          file: ./program/Dockerfile
          tags: bcm-program:latest
          outputs: type=docker,dest=/tmp/bcm-program-image.tar
      - name: Upload image
        uses: actions/upload-artifact@v2
        with:
          name: bcm_program_image
          path: /tmp/bcm-program-image.tar
          retention-days: 1
      - name: Load Docker image
        run: |
          docker load --input /tmp/bcm-program-image.tar
      - name: Create Authority Keypair File
        run: echo "$PROGRAM_AUTHORITY_KEYPAIR" > ./program/target/deploy/id.json
      - name: Create Program Keypair File
        run: echo "$PROGRAM_KEYPAIR" > ./program/target/deploy/blockchain_credential_manager-keypair.json
      - name: Run tests
        run: |
          docker run --rm --volume=$(pwd)/program/target/deploy:/program/target/deploy \
          -e PROGRAM_AUTHORITY_KEYPAIR_FILE=/program/target/deploy/id.json \
          -e PROGRAM_KEYPAIR_FILE=/program/target/deploy/blockchain_credential_manager-keypair.json \
          bcm-program bash -c 'make test AUTHORITY_KEYPAIR_FILE="${PROGRAM_AUTHORITY_KEYPAIR_FILE}"'

  deploy-program:
    name: Deploy - Program
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/heads/release/') || github.ref == 'refs/heads/main'
    needs: ci-program
    env:
      PROGRAM_AUTHORITY_KEYPAIR: ${{ secrets.PROGRAM_AUTHORITY_KEYPAIR }}
      PROGRAM_KEYPAIR: ${{ secrets.PROGRAM_KEYPAIR }}
    steps:
      - uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Download image
        uses: actions/download-artifact@v2
        with:
          name: bcm_program_image
          path: /tmp
      - name: Load Docker image
        run: |
          docker load --input /tmp/bcm-program-image.tar
      - name: Create Authority Keypair File
        run: echo "$PROGRAM_AUTHORITY_KEYPAIR" > ./program/target/deploy/id.json
      - name: Create Program Keypair File
        run: echo "$PROGRAM_KEYPAIR" > ./program/target/deploy/blockchain_credential_manager-keypair.json
      - name: Deploy to Solana Devnet
        if: startsWith(github.ref, 'refs/heads/release/')
        run: |
          docker run --rm --volume=$(pwd)/program/target/deploy:/program/target/deploy \
          -e PROGRAM_AUTHORITY_KEYPAIR_FILE=/program/target/deploy/id.json \
          -e PROGRAM_KEYPAIR_FILE=/program/target/deploy/blockchain_credential_manager-keypair.json \
          bcm-program bash -c '\
            make switch-devnet &&\
            make airdrop AUTHORITY_KEYPAIR_FILE="${PROGRAM_AUTHORITY_KEYPAIR_FILE}" &&\
            make deploy AUTHORITY_KEYPAIR_FILE="${PROGRAM_AUTHORITY_KEYPAIR_FILE}" CLUSTER=devnet \
          '
      - name: Deploy to Solana Testnet
        if: github.ref == 'refs/heads/main'
        run: |
          docker run --rm --volume=$(pwd)/program/target/deploy:/program/target/deploy \
          -e PROGRAM_AUTHORITY_KEYPAIR_FILE=/program/target/deploy/id.json \
          -e PROGRAM_KEYPAIR_FILE=/program/target/deploy/blockchain_credential_manager-keypair.json \
          bcm-program bash -c '\
            make switch-testnet &&\
            make airdrop AUTHORITY_KEYPAIR_FILE="${PROGRAM_AUTHORITY_KEYPAIR_FILE}" &&\
            make deploy AUTHORITY_KEYPAIR_FILE="${PROGRAM_AUTHORITY_KEYPAIR_FILE}" CLUSTER=testnet \
          '

  ci-front:
    name: CI - Frontend
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Node
        uses: actions/setup-node@v1
        with:
          node-version: 16.x
      - name: Install dependencies
        run: yarn --cwd ./app install
      - name: Lint
        run: yarn --cwd ./app lint
      - name: Build app [Local]
        if: github.ref != 'refs/heads/main' && !startsWith(github.ref, 'refs/heads/release/')
        run: CI=false yarn --cwd ./app build
      - name: Build app [Release]
        if: startsWith(github.ref, 'refs/heads/release/')
        run: CI=false yarn --cwd ./app build:dev
      - name: Build app [Main]
        if: github.ref == 'refs/heads/main'
        run: CI=false yarn --cwd ./app build:test
      - name: Zip app
        run: zip -r app.zip ./app/build
      - name: Upload app artifact
        uses: actions/upload-artifact@v2
        with:
          name: app_artifact
          path: app.zip
          retention-days: 1

  release:
    name: Release App
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/heads/release/') || github.ref == 'refs/heads/main'
    needs: [ci-front, deploy-program]
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v2
      - name: Download app artifact
        uses: actions/download-artifact@v2
        with:
          name: app_artifact
      - name: Get Version
        id: getVersion
        run: echo "::set-output name=version::$(sed -n 's/ *version:\([[:print:]]*\).*/\1/p' project.yaml)"
      - name: Create Pre Release
        id: createPreRelease
        if: startsWith(github.ref, 'refs/heads/release/')
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.getVersion.outputs.version }}-rc
          release_name: Pre Release ${{ steps.getVersion.outputs.version }}
          draft: false
          prerelease: true
      - name: Upload Pre Release Asset
        if: startsWith(github.ref, 'refs/heads/release/')
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.createPreRelease.outputs.upload_url }}
          asset_path: app.zip
          asset_name: app_pre_release_${{ steps.getVersion.outputs.version }}.zip
          asset_content_type: application/zip
      - name: Create Release
        id: createRelease
        if: github.ref == 'refs/heads/main'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.getVersion.outputs.version }}
          release_name: Release ${{ steps.getVersion.outputs.version }}
          draft: false
          prerelease: false
      - name: Upload Release Asset
        if: github.ref == 'refs/heads/main'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.createRelease.outputs.upload_url }}
          asset_path: app.zip
          asset_name: app_${{ steps.getVersion.outputs.version }}.zip
          asset_content_type: application/zip

  clear-artifacts-pr:
    name: Clear artifacts (PR)
    runs-on: ubuntu-latest
    needs: [ci-program, ci-front]
    steps:
      - uses: geekyeggo/delete-artifact@v1
        with:
          name: |
            bcm_program_image
            app_artifact
          failOnError: false

  clear-artifacts:
    name: Clear artifacts
    runs-on: ubuntu-latest
    needs: [deploy-program, release]
    steps:
      - uses: geekyeggo/delete-artifact@v1
        with:
          name: |
            bcm_program_image
            app_artifact
          failOnError: false
